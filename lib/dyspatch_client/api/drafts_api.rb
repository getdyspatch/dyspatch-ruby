=begin
#Dyspatch API

## Introduction  The Dyspatch API is based on the REST paradigm and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for the following languages and web frameworks:  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 

OpenAPI spec version: 2019.10
Contact: support@dyspatch.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.9

=end

require 'uri'

module DyspatchClient
  class DraftsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Draft by ID
    # Gets a draft object with the matching ID. The "compiled" field will contain the unlocalized default template object.
    # @param draft_id A draft ID
    # @param target_language The type of templating language to compile as. Should only be used for visual templates.
    # @param [Hash] opts the optional parameters
    # @return [DraftRead]
    def drafts_draft_id_get(draft_id, target_language, opts = {})
      data, _status_code, _headers = drafts_draft_id_get_with_http_info(draft_id, target_language, opts)
      data
    end

    # Get Draft by ID
    # Gets a draft object with the matching ID. The "compiled" field will contain the unlocalized default template object.
    # @param draft_id A draft ID
    # @param target_language The type of templating language to compile as. Should only be used for visual templates.
    # @param [Hash] opts the optional parameters
    # @return [Array<(DraftRead, Fixnum, Hash)>] DraftRead data, response status code and response headers
    def drafts_draft_id_get_with_http_info(draft_id, target_language, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_get ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_get"
      end
      # verify the required parameter 'target_language' is set
      if @api_client.config.client_side_validation && target_language.nil?
        fail ArgumentError, "Missing the required parameter 'target_language' when calling DraftsApi.drafts_draft_id_get"
      end
      # verify enum value
      if @api_client.config.client_side_validation && !['html', 'jinja', 'handlebars', 'ampscript', 'freemarker', 'cheetah'].include?(target_language)
        fail ArgumentError, "invalid value for 'target_language', must be one of html, jinja, handlebars, ampscript, freemarker, cheetah"
      end
      # resource path
      local_var_path = '/drafts/{draftId}'.sub('{' + 'draftId' + '}', draft_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetLanguage'] = target_language

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftRead')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Localization Keys
    # Returns the list of values that need to be translated for the draft. Set the `Accept` header to `application/vnd.dyspatch.2019.10+json` to get a JSON object, or `text/vnd.dyspatch.2019.10+x-gettext-translation` to get the POT file.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version "2019.10", set the value to "application/vnd.dyspatch.2019.10+json".
    # @return [Array<LocalizationKeyRead>]
    def drafts_draft_id_localization_keys_get(draft_id, opts = {})
      data, _status_code, _headers = drafts_draft_id_localization_keys_get_with_http_info(draft_id, opts)
      data
    end

    # Get Localization Keys
    # Returns the list of values that need to be translated for the draft. Set the `Accept` header to `application/vnd.dyspatch.2019.10+json` to get a JSON object, or `text/vnd.dyspatch.2019.10+x-gettext-translation` to get the POT file.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version "2019.10", set the value to "application/vnd.dyspatch.2019.10+json".
    # @return [Array<(Array<LocalizationKeyRead>, Fixnum, Hash)>] Array<LocalizationKeyRead> data, response status code and response headers
    def drafts_draft_id_localization_keys_get_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_localization_keys_get ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_localization_keys_get"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/localizationKeys'.sub('{' + 'draftId' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json', 'text/vnd.dyspatch.2019.10+x-gettext-translation'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<LocalizationKeyRead>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_localization_keys_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Localizations on a Draft
    # Returns localization metadata object for a template draft.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @return [Array<LocalizationMetaRead>]
    def drafts_draft_id_localizations_get(draft_id, opts = {})
      data, _status_code, _headers = drafts_draft_id_localizations_get_with_http_info(draft_id, opts)
      data
    end

    # Get Localizations on a Draft
    # Returns localization metadata object for a template draft.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<LocalizationMetaRead>, Fixnum, Hash)>] Array<LocalizationMetaRead> data, response status code and response headers
    def drafts_draft_id_localizations_get_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_localizations_get ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_localizations_get"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/localizations'.sub('{' + 'draftId' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'Array<LocalizationMetaRead>')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_localizations_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Remove a Localization
    # Deletes the localization with the given `languageId` if it exists.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def drafts_draft_id_localizations_language_id_delete(draft_id, language_id, opts = {})
      drafts_draft_id_localizations_language_id_delete_with_http_info(draft_id, language_id, opts)
      nil
    end

    # Remove a Localization
    # Deletes the localization with the given `languageId` if it exists.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def drafts_draft_id_localizations_language_id_delete_with_http_info(draft_id, language_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_localizations_language_id_delete ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_delete"
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_delete"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/localizations/{languageId}'.sub('{' + 'draftId' + '}', draft_id.to_s).sub('{' + 'languageId' + '}', language_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_localizations_language_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Create or Update a Localization
    # Inserts a localization or sets the name on an existing localization that already uses the `languageId`.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def drafts_draft_id_localizations_language_id_put(draft_id, language_id, body, opts = {})
      drafts_draft_id_localizations_language_id_put_with_http_info(draft_id, language_id, body, opts)
      nil
    end

    # Create or Update a Localization
    # Inserts a localization or sets the name on an existing localization that already uses the `languageId`.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def drafts_draft_id_localizations_language_id_put_with_http_info(draft_id, language_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_localizations_language_id_put ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_put"
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DraftsApi.drafts_draft_id_localizations_language_id_put"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/localizations/{languageId}'.sub('{' + 'draftId' + '}', draft_id.to_s).sub('{' + 'languageId' + '}', language_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_localizations_language_id_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Set Translations for Language
    # Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format `%(my_variable)s` and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set `Content-Type` header to `application/json`. For gettext PO format set `Content-Type` header to `text/x-gettext-translation`.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def drafts_draft_id_localizations_language_id_translations_put(draft_id, language_id, body, opts = {})
      drafts_draft_id_localizations_language_id_translations_put_with_http_info(draft_id, language_id, body, opts)
      nil
    end

    # Set Translations for Language
    # Completely replaces any existing translations for the given language with those provided in request body. Variables embedded in keys or values are expected to be in the format `%(my_variable)s` and will automatically convert to the correct Dyspatch format depending on the type of template. Accepts key/value pairs in JSON format or in gettext PO file format. For JSON set `Content-Type` header to `application/json`. For gettext PO format set `Content-Type` header to `text/x-gettext-translation`.
    # @param draft_id A draft ID
    # @param language_id A language ID (eg: en-US)
    # @param body 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def drafts_draft_id_localizations_language_id_translations_put_with_http_info(draft_id, language_id, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_localizations_language_id_translations_put ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_translations_put"
      end
      # verify the required parameter 'language_id' is set
      if @api_client.config.client_side_validation && language_id.nil?
        fail ArgumentError, "Missing the required parameter 'language_id' when calling DraftsApi.drafts_draft_id_localizations_language_id_translations_put"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling DraftsApi.drafts_draft_id_localizations_language_id_translations_put"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/localizations/{languageId}/translations'.sub('{' + 'draftId' + '}', draft_id.to_s).sub('{' + 'languageId' + '}', language_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_localizations_language_id_translations_put\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Submit the Draft for Approval
    # Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def drafts_draft_id_publish_request_post(draft_id, opts = {})
      drafts_draft_id_publish_request_post_with_http_info(draft_id, opts)
      nil
    end

    # Submit the Draft for Approval
    # Moves the draft into [submitted and locked state](https://docs.dyspatch.io/templates/submitting_a_template/#awaiting-approval). This will allow your email stakeholders to review the template draft and provide feedback.
    # @param draft_id A draft ID
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def drafts_draft_id_publish_request_post_with_http_info(draft_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_draft_id_publish_request_post ...'
      end
      # verify the required parameter 'draft_id' is set
      if @api_client.config.client_side_validation && draft_id.nil?
        fail ArgumentError, "Missing the required parameter 'draft_id' when calling DraftsApi.drafts_draft_id_publish_request_post"
      end
      # resource path
      local_var_path = '/drafts/{draftId}/publishRequest'.sub('{' + 'draftId' + '}', draft_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_draft_id_publish_request_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Drafts
    # Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter the list of drafts by a particular status
    # @return [DraftsRead]
    def drafts_get(opts = {})
      data, _status_code, _headers = drafts_get_with_http_info(opts)
      data
    end

    # List Drafts
    # Gets a list of all drafts for your oranization. Up to 25 results returned before results are paginated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :status Filter the list of drafts by a particular status
    # @return [Array<(DraftsRead, Fixnum, Hash)>] DraftsRead data, response status code and response headers
    def drafts_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DraftsApi.drafts_get ...'
      end
      if @api_client.config.client_side_validation && opts[:'status'] && !['awaitingTranslation'].include?(opts[:'status'])
        fail ArgumentError, 'invalid value for "status", must be one of awaitingTranslation'
      end
      # resource path
      local_var_path = '/drafts'

      # query parameters
      query_params = {}
      query_params[:'status'] = opts[:'status'] if !opts[:'status'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.10+json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'DraftsRead')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DraftsApi#drafts_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
