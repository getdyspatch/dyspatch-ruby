=begin
#Dyspatch API

## Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.   - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) 

OpenAPI spec version: 2018.08
Contact: support@dyspatch.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module DyspatchClient
  class LocalizationsApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # Get Localization Object by ID
    # Returns a specific localization object with a matching ID
    # @param localization_id A localization ID
    # @param accept A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @return [LocalizationRead]
    def localizations_localization_id_get(localization_id, accept, opts = {})
      data, _status_code, _headers = localizations_localization_id_get_with_http_info(localization_id, accept, opts)
      return data
    end

    # Get Localization Object by ID
    # Returns a specific localization object with a matching ID
    # @param localization_id A localization ID
    # @param accept A version of the API that should be used for the request. For example, to use version \&quot;2018.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2018.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(LocalizationRead, Fixnum, Hash)>] LocalizationRead data, response status code and response headers
    def localizations_localization_id_get_with_http_info(localization_id, accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: LocalizationsApi.localizations_localization_id_get ..."
      end
      # verify the required parameter 'localization_id' is set
      if @api_client.config.client_side_validation && localization_id.nil?
        fail ArgumentError, "Missing the required parameter 'localization_id' when calling LocalizationsApi.localizations_localization_id_get"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling LocalizationsApi.localizations_localization_id_get"
      end
      # resource path
      local_var_path = "/localizations/{localizationId}".sub('{' + 'localizationId' + '}', localization_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2018.08+json'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'LocalizationRead')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: LocalizationsApi#localizations_localization_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
