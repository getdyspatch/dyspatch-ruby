=begin
#Dyspatch API

## Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries  Dyspatch provides API Clients for popular languages and web frameworks.   - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 

OpenAPI spec version: 2019.03
Contact: support@dyspatch.io
Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.3.1

=end

require "uri"

module DyspatchClient
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # List Templates
    # Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor A cursor value used to retrieve a specific page from a paginated result set.
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version \&quot;2019.03\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.03+json\&quot;
    # @return [TemplatesRead]
    def templates_get(opts = {})
      data, _status_code, _headers = templates_get_with_http_info(opts)
      return data
    end

    # List Templates
    # Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor A cursor value used to retrieve a specific page from a paginated result set.
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version \&quot;2019.03\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.03+json\&quot;
    # @return [Array<(TemplatesRead, Fixnum, Hash)>] TemplatesRead data, response status code and response headers
    def templates_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_get ..."
      end
      # resource path
      local_var_path = "/templates"

      # query parameters
      query_params = {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.03+json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplatesRead')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Template by ID
    # Gets a template object with the matching ID. If the template has published content the \"compiled\" field will contain the template .
    # @param template_id A template ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target_language The type of templating language to compile as. Should only be used for visual templates.
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version \&quot;2019.03\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.03+json\&quot;
    # @return [TemplateRead]
    def templates_template_id_get(template_id, opts = {})
      data, _status_code, _headers = templates_template_id_get_with_http_info(template_id, opts)
      return data
    end

    # Get Template by ID
    # Gets a template object with the matching ID. If the template has published content the \&quot;compiled\&quot; field will contain the template .
    # @param template_id A template ID
    # @param [Hash] opts the optional parameters
    # @option opts [String] :target_language The type of templating language to compile as. Should only be used for visual templates.
    # @option opts [String] :accept A version of the API that should be used for the request. For example, to use version \&quot;2019.03\&quot;, set the value to \&quot;application/vnd.dyspatch.2019.03+json\&quot;
    # @return [Array<(TemplateRead, Fixnum, Hash)>] TemplateRead data, response status code and response headers
    def templates_template_id_get_with_http_info(template_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: TemplatesApi.templates_template_id_get ..."
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.templates_template_id_get"
      end
      if @api_client.config.client_side_validation && opts[:'target_language'] && !['html', 'jinja', 'handlebars', 'ampscript', 'freemarker', 'cheetah'].include?(opts[:'target_language'])
        fail ArgumentError, 'invalid value for "target_language", must be one of html, jinja, handlebars, ampscript, freemarker, cheetah'
      end
      # resource path
      local_var_path = "/templates/{templateId}".sub('{' + 'templateId' + '}', template_id.to_s)

      # query parameters
      query_params = {}
      query_params[:'targetLanguage'] = opts[:'target_language'] if !opts[:'target_language'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2019.03+json'])
      header_params[:'Accept'] = opts[:'accept'] if !opts[:'accept'].nil?

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['Bearer']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'TemplateRead')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#templates_template_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
