=begin
#Dyspatch API

## Introduction  The Dyspatch API is based on the REST paradigm, and features resource based URLs with standard HTTP response codes to indicate errors. We use standard HTTP authentication and request verbs, and all responses are JSON formatted. See our [Implementation Guide](https://docs.dyspatch.io/development/implementing_dyspatch/) for more details on how to implement Dyspatch.  ## API Client Libraries Dyspatch provides API Clients for popular languages and web frameworks.  - [Java](https://github.com/getdyspatch/dyspatch-java) - [Javascript](https://github.com/getdyspatch/dyspatch-javascript) - [Python](https://github.com/getdyspatch/dyspatch-python) - [C#](https://github.com/getdyspatch/dyspatch-dotnet) - [Go](https://github.com/getdyspatch/dyspatch-golang) - [Ruby](https://github.com/getdyspatch/dyspatch-ruby) 

The version of the OpenAPI document: 2020.08
Contact: support@dyspatch.io
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'cgi'

module DyspatchClient
  class TemplatesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Get Template by ID
    # Gets a template object with the matching ID. If the template has published content the \"compiled\" field will contain the template .
    # @param template_id [String] A template ID
    # @param target_language [String] The type of templating language to compile as. Should only be used for visual templates.
    # @param accept [String] A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @return [TemplateRead]
    def get_template_by_id(template_id, target_language, accept, opts = {})
      data, _status_code, _headers = get_template_by_id_with_http_info(template_id, target_language, accept, opts)
      data
    end

    # Get Template by ID
    # Gets a template object with the matching ID. If the template has published content the \&quot;compiled\&quot; field will contain the template .
    # @param template_id [String] A template ID
    # @param target_language [String] The type of templating language to compile as. Should only be used for visual templates.
    # @param accept [String] A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(TemplateRead, Integer, Hash)>] TemplateRead data, response status code and response headers
    def get_template_by_id_with_http_info(template_id, target_language, accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.get_template_by_id ...'
      end
      # verify the required parameter 'template_id' is set
      if @api_client.config.client_side_validation && template_id.nil?
        fail ArgumentError, "Missing the required parameter 'template_id' when calling TemplatesApi.get_template_by_id"
      end
      # verify the required parameter 'target_language' is set
      if @api_client.config.client_side_validation && target_language.nil?
        fail ArgumentError, "Missing the required parameter 'target_language' when calling TemplatesApi.get_template_by_id"
      end
      # verify enum value
      allowable_values = ["html", "handlebars", "ampscript", "freemarker", "cheetah", "jinja", "liquid"]
      if @api_client.config.client_side_validation && !allowable_values.include?(target_language)
        fail ArgumentError, "invalid value for \"target_language\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling TemplatesApi.get_template_by_id"
      end
      # resource path
      local_var_path = '/templates/{templateId}'.sub('{' + 'templateId' + '}', CGI.escape(template_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'targetLanguage'] = target_language

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2020.04+json', '*/*'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TemplateRead' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_template_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # List Templates
    # Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
    # @param accept [String] A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor A cursor value used to retrieve a specific page from a paginated result set.
    # @return [TemplatesRead]
    def get_templates(accept, opts = {})
      data, _status_code, _headers = get_templates_with_http_info(accept, opts)
      data
    end

    # List Templates
    # Gets a list of Template Metadata objects for all templates. Up to 25 results returned before results are paginated.
    # @param accept [String] A version of the API that should be used for the request. For example, to use version \&quot;2020.08\&quot;, set the value to \&quot;application/vnd.dyspatch.2020.08+json\&quot;
    # @param [Hash] opts the optional parameters
    # @option opts [String] :cursor A cursor value used to retrieve a specific page from a paginated result set.
    # @return [Array<(TemplatesRead, Integer, Hash)>] TemplatesRead data, response status code and response headers
    def get_templates_with_http_info(accept, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: TemplatesApi.get_templates ...'
      end
      # verify the required parameter 'accept' is set
      if @api_client.config.client_side_validation && accept.nil?
        fail ArgumentError, "Missing the required parameter 'accept' when calling TemplatesApi.get_templates"
      end
      # resource path
      local_var_path = '/templates'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/vnd.dyspatch.2020.04+json', '*/*'])
      header_params[:'Accept'] = accept

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TemplatesRead' 

      # auth_names
      auth_names = opts[:auth_names] || ['Bearer']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: TemplatesApi#get_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end